# collect all the headers in the source directory
file(GLOB HEADERS ${CMAKE_SOURCE_DIR}/include/vsg/*.h ${CMAKE_SOURCE_DIR}/include/vsg/*/*.h)

# for out of source builds collect all the auto-generated headers in the build directory
if (NOT (${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR}))
    file(GLOB AUTOGENERATED_HEADERS ${CMAKE_BINARY_DIR}/include/vsg/*.h ${CMAKE_BINARY_DIR}/include/vsg/*/*.h)
    set(HEADERS ${HEADERS} ${AUTOGENERATED_HEADERS})
endif()

# set up the source files explicitly.
set(SOURCES

    core/Allocator.cpp
    core/Auxiliary.cpp
    core/ConstVisitor.cpp
    core/Data.cpp
    core/External.cpp
    core/Object.cpp
    core/Objects.cpp
    core/Visitor.cpp
    core/Version.cpp

    introspection/c_interface.cpp

    maths/transform.cpp

    nodes/Group.cpp
    nodes/Geometry.cpp
    nodes/Node.cpp
    nodes/QuadGroup.cpp
    nodes/CullGroup.cpp
    nodes/CullNode.cpp
    nodes/LOD.cpp
    nodes/PagedLOD.cpp
    nodes/MatrixTransform.cpp
    nodes/VertexIndexDraw.cpp

    commands/BindIndexBuffer.cpp
    commands/BindVertexBuffers.cpp
    commands/Commands.cpp
    commands/BlitImage.cpp
    commands/CopyImage.cpp
    commands/CopyImageToBuffer.cpp
    commands/CopyAndReleaseBufferDataCommand.cpp
    commands/CopyAndReleaseImageDataCommand.cpp
    commands/PipelineBarrier.cpp
    commands/Event.cpp
    commands/NextSubPass.cpp
    commands/Dispatch.cpp
    commands/PushConstants.cpp
    commands/Draw.cpp
    commands/DrawIndexed.cpp

    state/ComputePipeline.cpp
    state/DescriptorSet.cpp
    state/GraphicsPipeline.cpp
    state/GraphicsPipelineStates.cpp
    state/Descriptor.cpp
    state/DescriptorBuffer.cpp
    state/DescriptorImage.cpp
    state/DescriptorImageView.cpp
    state/DescriptorTexelBufferView.cpp
    state/DescriptorSetLayout.cpp
    state/ShaderModule.cpp
    state/ShaderStage.cpp
    state/PipelineLayout.cpp
    state/Sampler.cpp
    state/ResourceHints.cpp
    state/StateCommand.cpp
    state/StateGroup.cpp

    io/FileSystem.cpp
    io/AsciiInput.cpp
    io/DatabasePager.cpp
    io/AsciiOutput.cpp
    io/BinaryInput.cpp
    io/BinaryOutput.cpp
    io/Input.cpp
    io/ObjectCache.cpp
    io/Output.cpp
    io/Options.cpp
    io/ObjectFactory.cpp
    io/ReaderWriter.cpp
    io/ReaderWriter_vsg.cpp
    io/read.cpp
    io/write.cpp

    traversals/ArrayState.cpp
    traversals/RecordTraversal.cpp
    traversals/CompileTraversal.cpp
    traversals/ComputeBounds.cpp
    traversals/Intersector.cpp
    traversals/LineSegmentIntersector.cpp
    traversals/LoadPagedLOD.cpp

    threading/Affinity.cpp
    threading/OperationQueue.cpp
    threading/OperationThreads.cpp

    viewer/Camera.cpp
    viewer/EllipsoidModel.cpp
    viewer/Viewer.cpp
    viewer/Window.cpp
    viewer/Trackball.cpp
    viewer/CopyImageViewToWindow.cpp
    viewer/ExecuteCommands.cpp
    viewer/CommandGraph.cpp
    viewer/RenderGraph.cpp
    viewer/Presentation.cpp
    viewer/RecordAndSubmitTask.cpp

    raytracing/AccelerationGeometry.cpp
    raytracing/AccelerationStructure.cpp
    raytracing/BottomLevelAccelerationStructure.cpp
    raytracing/BuildAccelerationStructureTraversal.cpp
    raytracing/DescriptorAccelerationStructure.cpp
    raytracing/RayTracingPipeline.cpp
    raytracing/RayTracingShaderGroup.cpp
    raytracing/TopLevelAccelerationStructure.cpp
    raytracing/TraceRays.cpp


    vk/Buffer.cpp
    vk/BufferData.cpp
    vk/BufferView.cpp
    vk/CommandBuffer.cpp
    vk/CommandPool.cpp
    vk/Context.cpp
    vk/DescriptorPool.cpp
    vk/Device.cpp
    vk/DeviceMemory.cpp
    vk/Extensions.cpp
    vk/Fence.cpp
    vk/Framebuffer.cpp
    vk/Image.cpp
    vk/ImageData.cpp
    vk/ImageView.cpp
    vk/Instance.cpp
    vk/MemoryBufferPools.cpp
    vk/PhysicalDevice.cpp
    vk/Queue.cpp
    vk/RenderPass.cpp
    vk/Semaphore.cpp
    vk/Surface.cpp
    vk/Swapchain.cpp

    utils/CommandLine.cpp
)

# add platform specific Window implementation

# set up library dependencies
set(LIBRARIES PUBLIC
    Vulkan::Vulkan
    Threads::Threads
)

if (ANDROID)
    set(HEADERS ${HEADERS} ${CMAKE_SOURCE_DIR}/include/vsg/platform/android/Android_Window.h)
    set(SOURCES ${SOURCES} platform/android/Android_Window.cpp)

    if(CMAKE_SYSTEM_VERSION GREATER 24)
        set(LIBRARIES ${LIBRARIES} PRIVATE ${AndroidLib} PRIVATE ${AndroidNativeWindowLib})
    else()
        set(LIBRARIES ${LIBRARIES} PRIVATE ${AndroidLib})
    endif()

elseif (WIN32)
    set(SOURCES ${SOURCES} platform/win32/Win32_Window.cpp)
elseif (APPLE)
    set(SOURCES ${SOURCES} platform/macos/MacOS_Window.mm)
    set(LIBRARIES ${LIBRARIES} PRIVATE ${COCOA_LIBRARY} PRIVATE ${QUARTZCORE_LIBRARY})
else()
    set(SOURCES ${SOURCES} platform/unix/Xcb_Window.cpp)
    set(LIBRARIES ${LIBRARIES} PRIVATE PkgConfig::xcb)
endif()


add_library(vsg ${HEADERS} ${SOURCES})

if(MSVC)
    # ensure the libraries are all built in the lib directory
    macro(SET_OUTPUT_DIR_PROPERTY TARGET_TARGETNAME RELATIVE_OUTDIR)
        # Global properties (All generators but VS & Xcode)
        set_target_properties(${TARGET_TARGETNAME} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY "${OUTPUT_LIBDIR}/${RELATIVE_OUTDIR}")
        set_target_properties(${TARGET_TARGETNAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${OUTPUT_LIBDIR}/${RELATIVE_OUTDIR}")
        set_target_properties(${TARGET_TARGETNAME} PROPERTIES LIBRARY_OUTPUT_DIRECTORY "${OUTPUT_LIBDIR}/${RELATIVE_OUTDIR}")

        # Per-configuration property (VS, Xcode)
        foreach(CONF ${CMAKE_CONFIGURATION_TYPES})        # For each configuration (Debug, Release, MinSizeRel... and/or anything the user chooses)
            string(TOUPPER "${CONF}" CONF)                # Go uppercase (DEBUG, RELEASE...)

            # We use "FILE(TO_CMAKE_PATH", to create nice looking paths
            set_target_properties(${TARGET_TARGETNAME} PROPERTIES "ARCHIVE_OUTPUT_DIRECTORY_${CONF}" "${OUTPUT_LIBDIR}/${RELATIVE_OUTDIR}")
            set_target_properties(${TARGET_TARGETNAME} PROPERTIES "RUNTIME_OUTPUT_DIRECTORY_${CONF}" "${OUTPUT_LIBDIR}/${RELATIVE_OUTDIR}")
            set_target_properties(${TARGET_TARGETNAME} PROPERTIES "LIBRARY_OUTPUT_DIRECTORY_${CONF}" "${OUTPUT_LIBDIR}/${RELATIVE_OUTDIR}")
        endforeach()
    endmacro()

    SET_OUTPUT_DIR_PROPERTY(vsg "")
	
    option(ENABLE_MP_FLAG "Turning on this option will add the multi-processor flag in MSVC for VSG and it's included projects" ON)
	
    if(ENABLE_MP_FLAG)
        target_compile_options(vsg PRIVATE "/MP")
    endif()

endif()


# place header and source files into group folders to help IDE's present the files in a logical manner
function(ASSIGN_SOURCE_GROUPS GROUP_NAME ROOT_FOLDER)
    foreach(FILE IN ITEMS ${ARGN})
        if (IS_ABSOLUTE "${FILE}")
            file(RELATIVE_PATH RELATIVE_SOURCE "${ROOT_FOLDER}" "${FILE}")
        else()
            set(RELATIVE_SOURCE "${FILE}")
        endif()
        get_filename_component(SOURCE_PATH "${RELATIVE_SOURCE}" PATH)
        string(REPLACE "/" "\\" SOURCE_PATH_MSVC "${SOURCE_PATH}")
        source_group("${GROUP_NAME}\\${SOURCE_PATH_MSVC}" FILES "${FILE}")
    endforeach()
endfunction(ASSIGN_SOURCE_GROUPS)

# enable folders for MSVC
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

# group source files and headers
ASSIGN_SOURCE_GROUPS("Source Files" "${CMAKE_CURRENT_SOURCE_DIR}" ${SOURCES})
ASSIGN_SOURCE_GROUPS("Header Files" "${CMAKE_SOURCE_DIR}/include/vsg" ${HEADERS})


# set up versions and position independent code that is required for unix platforms
set_property(TARGET vsg PROPERTY VERSION ${VSG_VERSION_MAJOR}.${VSG_VERSION_MINOR}.${VSG_VERSION_PATCH})
set_property(TARGET vsg PROPERTY SOVERSION ${VSG_SOVERSION})
set_property(TARGET vsg PROPERTY POSITION_INDEPENDENT_CODE ON)
set_property(TARGET vsg PROPERTY CXX_STANDARD 17)

target_include_directories(vsg PUBLIC $<BUILD_INTERFACE:${VSG_SOURCE_DIR}/include> $<BUILD_INTERFACE:${VSG_BINARY_DIR}/include>)


target_link_libraries(vsg ${LIBRARIES})


install(TARGETS vsg EXPORT vsgTargets
        LIBRARY DESTINATION lib
        ARCHIVE DESTINATION lib
        RUNTIME DESTINATION bin
        INCLUDES DESTINATION include
)

if (BUILD_SHARED_LIBS)
    target_compile_definitions(vsg INTERFACE VSG_SHARED_LIBRARY)
endif()

install(DIRECTORY ${CMAKE_SOURCE_DIR}/include/vsg DESTINATION include)
if (NOT(${CMAKE_BINARY_DIR} STREQUAL ${CMAKE_SOURCE_DIR}))
    install(DIRECTORY ${CMAKE_BINARY_DIR}/include/vsg DESTINATION include)
endif()

# [==[
install(EXPORT vsgTargets
    FILE vsgTargets.cmake
    NAMESPACE vsg::
    DESTINATION lib/cmake/vsg
)

include(CMakePackageConfigHelpers)
write_basic_package_version_file("${CMAKE_BINARY_DIR}/src/vsg/vsgConfigVersion.cmake" COMPATIBILITY SameMajorVersion)

install(FILES "vsgConfig.cmake" "${CMAKE_BINARY_DIR}/src/vsg/vsgConfigVersion.cmake" DESTINATION lib/cmake/vsg)

# ]==]
